---
title: "Sales Analysis Report"
subtitle: "Quarterly Performance Overview"
format:
  typst:
    brand: _brand.yml
    logo:
      path: medium  # Uses the 'medium' logo from _brand.yml
      alt: "Company Logo"
      width: 1.5in
      location: right-top
      padding-top: 0.25in
      padding-right: 0.5in
      padding-bottom: 0in
      padding-left: 0in
    template-partials:
       - typst-show.typ
       - typst-template.typ
    pdf-fonts: true  # Change to true to ensure fonts are embedded
    # Add font-specific configuration

execute:
      echo: false
      warning: false
---



```{r setup}
# Load required libraries
library(tidyverse)
library(lubridate)
library(scales)
library(DT)
library(flextable) # Replacing gt
library(officer) # Required for flextable formatting
library(gridExtra)
library(cowplot)

# Create custom theme for flextable
set_flextable_defaults(
  font.family = "NOTO Sans",
  font.size = 12,
  padding.top = 3,
  padding.bottom = 3,
  padding.left = 5,
  padding.right = 5
)
```


```{r}
# Function to create standardized flextable with company styling
create_company_flextable <- function(data,
                                     caption = NULL,
                                     subtitle = NULL,
                                     primary_color = "#7093BF") {
  # Create the base flextable
  ft <- flextable(data)

  # Apply styling
  ft <- ft %>%
    # Set theme
    theme_vanilla() %>%
    # Customize header
    bg(part = "header", bg = primary_color) %>%
    color(part = "header", color = "white") %>%
    bold(part = "header") %>%
    # Format the table layout
    fontsize(size = 10) %>%
    padding(padding = 5) %>%
    align(align = "center", part = "header") %>%
    # Add borders
    border_outer(border = fp_border(color = primary_color, width = 2)) %>%
    border_inner_h(border = fp_border(color = primary_color, width = 1))

  # Add caption if provided
  if (!is.null(caption)) {
    if (is.null(subtitle)) {
      ft <- set_caption(ft, caption = caption)
    } else {
      ft <- set_caption(ft, caption = paste(caption, subtitle, sep = ": "))
    }
  }

  # Autofit for better appearance
  ft <- autofit(ft)

  return(ft)
}

# Function to format currency values in flextable
format_currency_columns <- function(ft, columns, currency = "USD", digits = 0) {
  for (col in columns) {
    ft <- ft %>%
      colformat_double(
        j = col, # Changed from 'column' to 'j'
        digits = digits,
        big.mark = ",",
        prefix = ifelse(currency == "USD", "$", "")
      )
  }
  return(ft)
}

# Function to format percentage values in flextable - FIXED VERSION
format_percent_columns <- function(ft, columns, digits = 1) {
  for (col in columns) {
    ft <- ft %>%
      colformat_double(
        j = col,
        digits = digits,
        suffix = "%"
      )
  }
  return(ft)
}



# Function to format number values with separators
format_number_columns <- function(ft, columns, digits = 0) {
  for (col in columns) {
    ft <- ft %>%
      colformat_double(
        j = col, # Changed from 'column' to 'j'
        digits = digits,
        big.mark = ","
      )
  }
  return(ft)
}
```



```{r}
# Create a custom palette function
my_palette <- function(n) {
  # A sophisticated palette with 12 distinct colors
  colors <- c(
    "#5F4B8B", # Deep purple
    "#00A5E3", # Bright blue
    "#FF7D00", # Vibrant orange
    "#4E937A", # Teal
    "#E84855", # Coral red
    "#8A9B68", # Olive green
    "#4B296B", # Dark purple
    "#7DCFB6", # Mint
    "#F79824", # Golden orange
    "#00635D", # Dark teal
    "#B33951", # Ruby
    "#2D4654"  # Slate blue
  )
  
  # Return the requested number of colors
  colors[1:min(n, length(colors))]
}


# scale_fill_manual(values = my_palette(4))
```



# Executive Summary

This report provides a comprehensive analysis of sales performance for the past fiscal year. Key findings include:

- Total sales revenue of $10.2M, representing a 15% increase from the previous year
- Highest performing product categories: Electronics (32%), Furniture (28%), and Office Supplies (25%)
- Northeast region showing the strongest growth at 22% year-over-year
- Customer retention rate improved to 78%, up from 72% last year

# Data Overview

```{r load-data, fig.align='center'}
# Generate sample sales data for demonstration
set.seed(123)

# Function to generate realistic sales data
generate_sales_data <- function(n = 1000) {
  # Define product categories and sub-categories
  categories <- c("Electronics", "Furniture", "Office Supplies", "Clothing")

  subcategories <- list(
    Electronics = c("Phones", "Computers", "Accessories", "Appliances"),
    Furniture = c("Chairs", "Tables", "Bookshelves", "Cabinets"),
    `Office Supplies` = c("Paper", "Binders", "Art Supplies", "Storage"),
    Clothing = c("Men's Apparel", "Women's Apparel", "Footwear", "Accessories")
  )

  # Define regions and states
  regions <- c("Northeast", "Southeast", "Midwest", "West")

  states_by_region <- list(
    Northeast = c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ"),
    Southeast = c("DE", "MD", "VA", "WV", "KY", "NC", "SC", "TN", "GA", "FL", "AL", "MS", "AR", "LA"),
    Midwest = c("OH", "IN", "MI", "IL", "WI", "MN", "IA", "MO", "ND", "SD", "NE", "KS"),
    West = c("MT", "ID", "WY", "CO", "NM", "AZ", "UT", "NV", "CA", "OR", "WA", "AK", "HI")
  )

  # Customer segments
  segments <- c("Consumer", "Corporate", "Home Office", "Small Business")

  # Generate data
  data <- tibble(
    order_id = paste0("ORD-", sample(10000:99999, n, replace = FALSE)),
    order_date = sample(seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "day"), n, replace = TRUE),
    region = sample(regions, n, replace = TRUE, prob = c(0.3, 0.25, 0.2, 0.25)),
    customer_segment = sample(segments, n, replace = TRUE),
    category = sample(categories, n, replace = TRUE, prob = c(0.32, 0.28, 0.25, 0.15))
  ) %>%
    mutate(
      state = sapply(region, function(r) sample(states_by_region[[r]], 1)),
      subcategory = mapply(function(cat) sample(subcategories[[cat]], 1), category),
      sales = case_when(
        category == "Electronics" ~ runif(n, 100, 2000),
        category == "Furniture" ~ runif(n, 80, 1500),
        category == "Office Supplies" ~ runif(n, 10, 300),
        category == "Clothing" ~ runif(n, 30, 500)
      ),
      quantity = sample(1:10, n, replace = TRUE),
      discount = sample(c(0, 0.05, 0.1, 0.15, 0.2), n, replace = TRUE, prob = c(0.7, 0.1, 0.1, 0.05, 0.05)),
      profit = sales * sample(seq(0.15, 0.45, by = 0.01), n, replace = TRUE),
      ship_mode = sample(c("Standard", "Express", "Priority", "Same Day"), n, replace = TRUE, prob = c(0.6, 0.2, 0.15, 0.05)),
      quarter = paste0("Q", quarter(order_date)),
      month = month(order_date, label = TRUE)
    )

  return(data)
}

# Generate the sample data
sales_data <- generate_sales_data(5000)

# Display first few rows of the dataset
head(sales_data) %>%
  create_company_flextable(
    caption = "Sample Sales Data",
    subtitle = "First few rows of the dataset"
  )
```

# Sales Performance Analysis

## Revenue Trends

### Monthly Revenue

```{r monthly-revenue, fig.width=10, fig.height=5, fig.align='left'}
# Calculate monthly sales
monthly_sales <- sales_data %>%
  group_by(month) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales
  ) %>%
  mutate(month_num = as.numeric(month)) %>%
  arrange(month_num)

# 1. Monthly Revenue Plot (replacing Plotly scatter)
monthly_revenue_plot <- function(monthly_sales) {
  ggplot(monthly_sales, aes(x = month, y = total_sales, group = 1)) +
    geom_line(color = "#FF6F20", linewidth = 1) +
    geom_point(color = "#FF6F20", size = 3) +
    labs(
      title = "Monthly Sales Trends",
      x = "Month",
      y = "Total Sales ($)"
    ) +
    scale_y_continuous(labels = scales::dollar_format()) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold"),
      panel.background = element_rect(fill = "#ffffff", color = NA),
      plot.background = element_rect(fill = "#ffffff", color = NA),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
}
monthly_revenue_plot(monthly_sales)
```

### Quarterly Performance

```{r quarterly-performance, fig.width=8, fig.height=4}
# Calculate quarterly performance
quarterly_sales <- sales_data %>%
  group_by(quarter) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    order_count = n_distinct(order_id),
    avg_order_value = total_sales / order_count
  )

# Create flextable for quarterly performance (replacing gt)
quarterly_sales %>%
  create_company_flextable(
    caption = "Quarterly Sales Performance",
    subtitle = "Breakdown by key metrics"
  ) %>%
  format_currency_columns(
    columns = c("total_sales", "total_profit", "avg_order_value")
  ) %>%
  format_percent_columns(
    columns = c("profit_margin")
  ) %>%
  format_number_columns(
    columns = c("order_count")
  )
```


::: {layout-ncol=2}
## Category Analysis

```{r category-analysis, fig.align='center',fig.height=4.5, fig.width=5.65}
# Analyze sales by category
category_sales <- sales_data %>%
  group_by(category) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    avg_discount = mean(discount)
  ) %>%
  arrange(desc(total_sales))

# Create a pie chart for category distribution
# Calculate percentages and positions for labels
pie_data <- category_sales %>%
  mutate(
    percentage = total_sales / sum(total_sales) * 100,
    # For label positioning in pie chart
    position = cumsum(percentage) - 0.5 * percentage
  )

ggplot(pie_data, aes(x = "", y = total_sales, fill = category)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = my_palette(12)) +
  labs(
    title = "Sales by Product Category",
    fill = "Category"
  ) +
  # Add percentage labels
  # geom_text(aes(y = position,
  #               label = paste0(round(percentage, 1), "%")),
  #           position = position_stack(vjust = 0.5),
  #           color = "white") +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    panel.grid = element_blank(),
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
        plot.margin = margin(0, 0, 0, 0, "cm"),
    legend.background = element_rect(fill = "#ffffff", color = NA),
    plot.title = element_text(hjust = 0.5, face = "bold")
  )
```

### Subcategory Performance

```{r subcategory-analysis, fig.height=4.5, fig.width=6, fig.align='center'}
# Analyze sales by subcategory
subcategory_sales <- sales_data %>%
  group_by(category, subcategory) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    order_count = n()
  ) %>%
  ungroup() %>%
  arrange(category, desc(total_sales))

# Create a horizontal bar chart
ggplot(subcategory_sales, aes(x = total_sales, y = reorder(subcategory, total_sales), fill = category)) +
  geom_col() +
  scale_fill_manual(values = my_palette(12)) +
  labs(
    title = "Sales by Product Subcategory",
    x = "Total Sales ($)",
    y = "",
    fill = "Category"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
    legend.position = "right"
  )
```


:::

## Regional Analysis

```{r regional-analysis, fig.height=3, fig.width=6, fig.align='center'}
# Regional sales analysis
regional_sales <- sales_data %>%
  group_by(region) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    order_count = n_distinct(order_id)
  ) %>%
  arrange(desc(total_sales))

# Create a bar chart for regional sales
ggplot(regional_sales, aes(x = reorder(region, -total_sales), y = total_sales, fill = region)) +
  geom_col() +
  scale_fill_manual(values = my_palette(12)) +
  labs(
    title = "Sales by Region",
    x = "Region",
    y = "Total Sales ($)"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "none", # Remove legend as colors are redundant with x-axis
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
    panel.grid = element_line(color = alpha("gray", 0.5))
  )
```

### State-level Analysis

```{r state-analysis, fig.height=4, fig.width=6, fig.align='center'}
# Calculate state-level metrics
state_sales <- sales_data %>%
  group_by(region, state) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit)
  ) %>%
  ungroup() %>%
  arrange(desc(total_sales)) %>%
  head(10) # Focus on top 10 states

# Create a horizontal bar chart for top states
ggplot(state_sales, aes(x = total_sales, y = reorder(state, total_sales), fill = region)) +
  geom_col() +
  scale_fill_manual(values = my_palette(12)) +
  labs(
    title = "Top 10 States by Sales",
    x = "Total Sales ($)",
    y = "State",
    fill = "Region"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
    plot.title = element_text(hjust = 0.5, face = "bold")
  )
```

## Customer Segment Analysis

```{r segment-analysis, fig.align='center'}
# Analyze customer segments
segment_sales <- sales_data %>%
  group_by(customer_segment) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    order_count = n_distinct(order_id),
    avg_order_value = total_sales / order_count
  ) %>%
  arrange(desc(total_sales))

# Create a GT table for segment analysis
segment_sales %>%
  create_company_flextable(
    caption = "Sales by Customer Segment",
    subtitle = "Performance metrics across different customer types"
  ) %>%
  format_currency_columns(
    columns = c("total_sales", "total_profit", "avg_order_value")
  ) %>%
  format_percent_columns(
    columns = c("profit_margin")
  ) %>%
  format_number_columns(
    columns = c("order_count")
  )
```


::: {layout-ncol=2}
### Segment Performance by Category

```{r segment-category-analysis, fig.height=3, fig.width=6, fig.align='center'}
# Analyze segments across categories
segment_category <- sales_data %>%
  group_by(customer_segment, category) %>%
  summarize(
    total_sales = sum(sales)
  ) %>%
  ungroup()

# Create a grouped bar chart
ggplot(segment_category, aes(x = customer_segment, y = total_sales, fill = category)) +
  geom_col(position = position_dodge()) +
  scale_fill_manual(values = my_palette(12)) +
  labs(
    title = "Customer Segment Performance by Category",
    x = "Customer Segment",
    y = "Total Sales ($)",
    fill = "Product Category"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

# Discount Analysis

```{r discount-analysis, fig.height=3, fig.width=6, fig.align='center'}
# Analyze impact of discounts
discount_impact <- sales_data %>%
  mutate(discount_bin = cut(discount,
    breaks = c(-0.001, 0.001, 0.05, 0.1, 0.15, 0.2, 1),
    labels = c("0%", "1-5%", "6-10%", "11-15%", "16-20%", ">20%")
  )) %>%
  group_by(discount_bin) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    order_count = n(),
    avg_order_value = total_sales / order_count
  )

# Create a scatter plot showing profit margin by discount level
ggplot(discount_impact, aes(x = discount_bin, y = profit_margin, size = total_sales)) +
  geom_point(color = "#FF6F20", alpha = 0.7) +
  labs(
    title = "Discount Impact on Profit Margin",
    x = "Discount Level",
    y = "Profit Margin",
    size = "Total Sales"
  ) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```


:::
# Ship Mode Analysis

```{r shipmode-analysis, fig.height=3, fig.width=6, fig.align='center'}
# Analyze shipping modes
shipmode_analysis <- sales_data %>%
  group_by(ship_mode) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales,
    order_count = n_distinct(order_id),
    avg_order_value = total_sales / order_count
  ) %>%
  arrange(desc(total_sales))

# Create a bar chart
ggplot(shipmode_analysis, aes(x = reorder(ship_mode, -total_sales), y = total_sales, fill = ship_mode)) +
  geom_col() +
  scale_fill_manual(values = my_palette(12)) +
  labs(
    title = "Sales by Shipping Mode",
    x = "Shipping Mode",
    y = "Total Sales ($)"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#ffffff", color = NA),
    plot.background = element_rect(fill = "#ffffff", color = NA),
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "none" # Remove legend as colors are redundant with x-axis
  )
```


{{< pagebreak >}}


# Key Insights and Recommendations

## Top Performing Products

```{r top-products, fig.align='center'}
# Find top performing product combinations
top_products <- sales_data %>%
  group_by(category, subcategory) %>%
  summarize(
    total_sales = sum(sales),
    total_profit = sum(profit),
    profit_margin = total_profit / total_sales
  ) %>%
  ungroup() %>%
  arrange(desc(total_profit)) %>%
  head(5)

# Create a GT table for top products
top_products %>%
  create_company_flextable(
    caption = "Top 5 Most Profitable Products",
    subtitle = "By category and subcategory"
  ) %>%
  format_currency_columns(
    columns = c("total_sales", "total_profit")
  ) %>%
  format_percent_columns(
    columns = c("profit_margin")
  )
```

## Key Insights

Based on the analysis, here are some key insights:

1. **Seasonal Patterns:** Sales show a clear seasonal pattern with peaks in Q2 and Q4.

2. **Category Performance:** Electronics and Furniture are the highest performing categories, accounting for 60% of total sales.

3. **Regional Performance:** The Northeast region leads in sales volume, followed by the West.

4. **Customer Segments:** Corporate clients generate the highest sales volume, while Small Business customers have the highest profit margin.

5. **Discount Impact:** Discounts between 10-15% appear to optimally balance sales volume and profit margin.

## Recommendations

Based on these insights, we recommend the following actions:

1. **Inventory Management:** Increase inventory of top-performing products in anticipation of Q2 and Q4 sales peaks.

2. **Product Focus:** Expand the Electronics and Furniture categories, with particular emphasis on Computers and Tables subcategories.

3. **Regional Strategy:** Increase marketing efforts in the Southeast region, which shows potential for growth based on population density vs. current sales.

4. **Discount Strategy:** Standardize discount ranges between 10-15% for optimal profit margins.

5. **Customer Targeting:** Develop specialized programs to attract more Small Business customers, who demonstrate the highest profit margins.

# Conclusion

The sales analysis reveals strong overall performance with clear opportunities for targeted improvements. By implementing the recommended strategies, we project an additional 8-12% revenue growth in the coming fiscal year.

# Appendix: Methodology

This analysis was performed using R and various data analysis packages including tidyverse, plotly, and gt. The data used represents sales transactions from January 1, 2023, to December 31, 2023.
